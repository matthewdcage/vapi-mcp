/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Vapi from "../index";
export interface JsonSchema {
    /**
     * This is the type of output you'd like.
     *
     * `string`, `number`, `integer`, `boolean` are the primitive types and should be obvious.
     *
     * `array` and `object` are more interesting and quite powerful. They allow you to define nested structures.
     *
     * For `array`, you can define the schema of the items in the array using the `items` property.
     *
     * For `object`, you can define the properties of the object using the `properties` property.
     */
    type: Vapi.JsonSchemaType;
    /**
     * This is required if the type is "array". This is the schema of the items in the array.
     *
     * This is of type JsonSchema. However, Swagger doesn't support circular references.
     */
    items?: Record<string, unknown>;
    /**
     * This is required if the type is "object". This specifies the properties of the object.
     *
     * This is a map of string to JsonSchema. However, Swagger doesn't support circular references.
     */
    properties?: Record<string, unknown>;
    /** This is the description to help the model understand what it needs to output. */
    description?: string;
    /**
     * This is a list of properties that are required.
     *
     * This only makes sense if the type is "object".
     */
    required?: string[];
    /** This is a regex that will be used to validate data in question. */
    regex?: string;
    /** This the value that will be used in filling the property. */
    value?: string;
    /** This the target variable that will be filled with the value of this property. */
    target?: string;
    /** This array specifies the allowed values that can be used to restrict the output of the model. */
    enum?: string[];
}
