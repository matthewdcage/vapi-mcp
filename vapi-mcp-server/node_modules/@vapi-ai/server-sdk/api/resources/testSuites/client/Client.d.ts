/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vapi from "../../../index";
export declare namespace TestSuites {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class TestSuites {
    protected readonly _options: TestSuites.Options;
    constructor(_options: TestSuites.Options);
    /**
     * @param {Vapi.TestSuiteControllerFindAllPaginatedRequest} request
     * @param {TestSuites.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteControllerFindAllPaginated(request?: Vapi.TestSuiteControllerFindAllPaginatedRequest, requestOptions?: TestSuites.RequestOptions): Promise<Vapi.TestSuitesPaginatedResponse>;
    /**
     * @param {Vapi.CreateTestSuiteDto} request
     * @param {TestSuites.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteControllerCreate(request?: Vapi.CreateTestSuiteDto, requestOptions?: TestSuites.RequestOptions): Promise<Vapi.TestSuite>;
    /**
     * @param {string} id
     * @param {TestSuites.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteControllerFindOne(id: string, requestOptions?: TestSuites.RequestOptions): Promise<Vapi.TestSuite>;
    /**
     * @param {string} id
     * @param {TestSuites.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteControllerRemove(id: string, requestOptions?: TestSuites.RequestOptions): Promise<Vapi.TestSuite>;
    /**
     * @param {string} id
     * @param {Vapi.UpdateTestSuiteDto} request
     * @param {TestSuites.RequestOptions} requestOptions - Request-specific configuration.
     */
    testSuiteControllerUpdate(id: string, request?: Vapi.UpdateTestSuiteDto, requestOptions?: TestSuites.RequestOptions): Promise<Vapi.TestSuite>;
    protected _getAuthorizationHeader(): Promise<string>;
}
